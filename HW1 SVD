import numpy as np
import cv2
from matplotlib import pyplot as plt
from PIL import Image
import math
import os

#讀取灰階圖片
dog_img = cv2.imread('dog.jpeg',0)
view_img = cv2.imread('view.jpeg',0)

#svd分解
def svd(image):
    u,sigma,vt = np.linalg.svd(image,full_matrices = False)
    return u,sigma,vt

#照片重組
def rebuild_img(u,sigma,vt,k):
    #使K最大值不超過sigma數量
    kmax = min(k,len(sigma)-1)
    #依照K值重組矩陣
    Ak= np.dot(u[:,:kmax],np.dot(np.diag(sigma[:kmax]),vt[:kmax,:]))
    #AK_img用於顯示圖片，AK用於計算
    Ak_img = Ak
    Ak_img[Ak_img<0]=0
    Ak_img[Ak_img>255]=255
    return np.rint(Ak_img).astype('uint8'),Ak

def search_k(sigma,k):   
    kmax = min(k,len(sigma)-1)
    if kmax != len(sigma)-1:
        result = round(sigma[kmax],3)
    else:
        result = 0.0
    return result

def norm2(a,ak):
    result = np.linalg.norm(a-ak,ord =2)
    result = round(result,3)
    return result

def file_compression(org_file,sample_file):
    #轉%
    result = (org_file / sample_file) * 100.0
    result = (str)(round(result,3)) + "%"
    return result

def sigma_fusion(sigma1, sigma2, multiple):
    #n= half-lengh of sigma1
    n = int(len(sigma1) / 2)
    #合成sigma1前半段和sigma2前半段，並將sigma2縮小，減少對sigma1的影響
    mix_sigma = np.concatenate((sigma1[:n], sigma2[:n]/multiple), axis=None) 
    return mix_sigma


#原圖分解
u,sigma,vt = svd(dog_img)
u_view,sigma_view,vt_view = svd(view_img)

multarray = [10,100,1000,10000,100000,1000000]

#隱藏圖片訊息
for i in range(0,6):
    name = (str) (i) + "mix.jpg"
    sigma_metrix = sigma_fusion(sigma,sigma_view,multarray[i])    
    mix_picture = np.dot(u,np.dot((np.diag(sigma_metrix)),vt))

#重新拆解隱藏訊息
    u_mix,sigma_mix,vt_mix = svd(mix_picture)

#取出後段sigma
    mix_sigma_length = int(len(sigma_mix)/2)
    need_sigma = sigma_mix[mix_sigma_length:]*multarray[i]

#重組圖片
    rebuild_view_img,rebuild_img_view_Ak = rebuild_img(u_view,need_sigma,vt_view,500)
    re_img = np.rint(rebuild_view_img).astype('uint8')
    cv2.imwrite(name,re_img)
    
#不同參數的圖片合成
    if i== 0:
        mixpicture = re_img
    else:
        if i == 1 or i == 2:
            mixpicture = np.concatenate((mixpicture,re_img),axis=1)
        else:
            if i == 3:
                mixpicture1 = rebuild_view_img
            else:
                mixpicture1 = np.concatenate((mixpicture1,re_img),axis=1)
lastmix = np.concatenate((mixpicture,mixpicture1),axis=0)

cv2.imwrite("lastmix.jpg",lastmix)
cv2.imshow("mixpicture",lastmix)
cv2.imshow("new_img",re_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

karray = [1,2,3,4,5,10,20,30,40,50,100,200,300,400,250]

#製作不同K值圖片合成
for i in range(1,4,1):
    for j in range(0,5,1):
        name = (str) (j+(i-1)*5)
        if j == 0:
            A,Ak = rebuild_img(u,sigma,vt,karray[j+(i-1)*5])
            cv2.imwrite(( (str)(karray[j+(i-1)*5]) + ".jpg"),A)
        else:
            A1,Ak = rebuild_img(u,sigma,vt,karray[j+(i-1)*5])
            A = np.concatenate((A,A1),axis=1)
            cv2.imwrite(( (str)(karray[j+(i-1)*5]) + ".jpg"),A1)
    if i == 1:
        A_result = A
    else:
        A_result = np.concatenate((A_result,A),axis = 0)
cv2.imwrite("org.jpg",dog_img)

org_filesize = os.path.getsize(r'org.jpg')
data = []
dataarray =[]
for i in range(0,15):
    #讀取圖片儲存空間
    name = (str)(karray[i]) + ".jpg" 
    file_size = os.path.getsize(name)
    file_com = file_compression(file_size,org_filesize)
    #2-norm
    org_img,org_Ak = rebuild_img(u,sigma,vt,10000)
    img_k,img_Ak = rebuild_img(u,sigma,vt,karray[i])
    norm_2 = norm2(org_Ak,img_Ak)
    #sigma k+1
    sigma_k = search_k(sigma,karray[i])    
    #data[k值,2-norm,sigma k+1,原圖大小,壓縮後圖片大小,壓縮比]
    data.append(karray[i])
    data.append(norm_2)
    data.append(sigma_k)
    data.append(round(org_filesize/1000,3))
    data.append(round(file_size/1000,3))
    data.append(file_com)
a = np.array(data)
dataarray = a.reshape(15,6)

#顯示計算結果表格
print("{:<7}{:<11}{:<12}{:<10}{:<10}{:<8}".format('k值','2-norm','sigma(k+1)','原圖大小(kb)','壓縮大小(kb)','壓縮比率'))
for i in dataarray:
    print("{:<8}{:<11}{:<13}{:<13}{:<13}{:<10}".format(i[0],i[1],i[2],i[3],i[4],i[5]))

#顯示K值與simga關係圖
list1 =[]
for i in range(1,len(sigma),1):    
    list1.append(search_k(sigma,i))   
plt.xlabel("K value")
plt.ylabel("sigma value")
plt.title("K-sigma")
plt.plot(list1)
plt.show()    
    
    
cv2.imshow("org_img",dog_img)
cv2.imshow("K",img_k)
cv2.waitKey(0)
cv2.destroyAllWindows()
